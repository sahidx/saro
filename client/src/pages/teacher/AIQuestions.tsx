import React, { useState } from 'react';
import { ArrowLeft, Bot, Sparkles, FileText, Settings } from 'lucide-react';
import { useLocation } from 'wouter';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

// Bangladesh NCTB Curriculum Structure - Official Chapter Names
const curriculumData = {
  chemistry: {
    "9-10": {
      papers: [], // No paper division for Class 9-10
      chapters: [
        "рзз. рж░рж╕рж╛ржпрж╝ржирзЗрж░ ржзрж╛рж░ржгрж╛",
        "рзи. ржкржжрж╛рж░рзНржерзЗрж░ ржЕржмрж╕рзНржерж╛",
        "рзй. ржкржжрж╛рж░рзНржерзЗрж░ ржЧржаржи",
        "рзк. ржкрж░рзНржпрж╛ржпрж╝ рж╕рж╛рж░ржгрзА",
        "рзл. рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ ржмржирзНржзржи",
        "рзм. ржорзМрж▓рзЗрж░ ржзрж╛рж░ржгрж╛ ржУ рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ ржЧржгржирж╛",
        "рзн. рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ ржмрж┐ржХрзНрж░рж┐ржпрж╝рж╛",
        "рзо. рж░рж╕рж╛ржпрж╝ржи ржУ рж╢ржХрзНрждрж┐",
        "рзп. ржПрж╕рж┐ржбтАСржХрзНрж╖рж╛рж░ рж╕ржорждрж╛",
        "рззрзж. ржЦржирж┐ржЬ рж╕ржорзНржкржж: ржзрж╛рждрзБ ржУ ржЕржзрж╛рждрзБ",
        "рззрзз. ржЦржирж┐ржЬ рж╕ржорзНржкржж: ржЬрзАржмрж╛рж╢рзНржо",
        "рззрзи. ржЖржорж╛ржжрзЗрж░ ржЬрзАржмржирзЗ рж░рж╕рж╛ржпрж╝ржи"
      ]
    },
    "11-12": {
      papers: ["рззржо ржкрждрзНрж░", "рзиржпрж╝ ржкрждрзНрж░"],
      chapters: {
        "рззржо ржкрждрзНрж░": [
          "рзз. рж▓рзНржпрж╛ржмрж░рзЗржЯрзЛрж░рж┐рж░ ржирж┐рж░рж╛ржкржж ржмрзНржпржмрж╣рж╛рж░",
          "рзи. ржЧрзБржгржЧржд рж░рж╕рж╛ржпрж╝ржи",
          "рзй. ржорзМрж▓рзЗрж░ ржкрж░рзНржпрж╛ржпрж╝ржмрзГрждрзНржд ржзрж░рзНржо ржУ рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ ржмржирзНржзржи",
          "рзк. рж░рж╛рж╕рж╛ржпрж╝ржирж┐ржХ ржкрж░рж┐ржмрж░рзНрждржи",
          "рзл. ржХрж░рзНржоржорзБржЦрзА рж░рж╕рж╛ржпрж╝ржи"
        ],
        "рзиржпрж╝ ржкрждрзНрж░": [
          "рзз. ржкрж░рж┐ржорж╛ржгржЧржд рж░рж╕рж╛ржпрж╝ржи",
          "рзи. ржЕрж░рзНржержирзИрждрж┐ржХ рж░рж╕рж╛ржпрж╝ржи",
          "рзй. рждржбрж╝рж┐рзО рж░рж╕рж╛ржпрж╝ржи",
          "рзк. ржЬрзИржм рж░рж╕рж╛ржпрж╝ржи"
        ]
      }
    }
  },
  ict: {
    "9-10": {
      papers: [], // No paper division for Class 9-10
      chapters: [
        "рзз. рждржерзНржп ржУ ржпрзЛржЧрж╛ржпрзЛржЧ ржкрзНрж░ржпрзБржХрзНрждрж┐: ржмрж┐рж╢рзНржм ржУ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржкрзНрж░рзЗржХрзНрж╖рж┐ржд",
        "рзи. ржХржорзНржкрж┐ржЙржЯрж╛рж░ рж╕рж┐рж╕рзНржЯрзЗржо",
        "рзй. ржХржорзНржкрж┐ржЙржЯрж╛рж░ рж╕ржлржЯржУржпрж╝рзНржпрж╛рж░",
        "рзк. ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржбрж┐ржнрж╛ржЗрж╕ ржУ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ",
        "рзл. ржбрж╛ржЯрж╛ржмрзЗржЬ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржо",
        "рзм. ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржУ ржЗржирзНржЯрж╛рж░ржирзЗржЯ",
        "рзн. ржУржпрж╝рзЗржм ржбрж┐ржЬрж╛ржЗржи",
        "рзо. рждржерзНржп ржУ ржпрзЛржЧрж╛ржпрзЛржЧ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ рж╕рж╛ржорж╛ржЬрж┐ржХ, ржЕрж░рзНржержирзИрждрж┐ржХ ржУ ржирзИрждрж┐ржХ ржмрзНржпржмрж╣рж╛рж░"
      ]
    },
    "11-12": {
      papers: [], // No paper division for HSC ICT
      chapters: [
        "рзз. рждржерзНржп ржУ ржпрзЛржЧрж╛ржпрзЛржЧ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ ржкрж░рж┐ржЪржпрж╝",
        "рзи. ICT-ржПрж░ ржнрзВржорж┐ржХрж╛ ржУ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝рждрж╛",
        "рзй. рждржерзНржп ржУ рж╕ржорж╛ржЬ",
        "рзк. ICT-ржП ржирзИрждрж┐ржХрждрж╛ ржУ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржирж╛ржЧрж░рж┐ржХрждрзНржм",
        "рзл. ржЙржжрзАржпрж╝ржорж╛ржи ржкрзНрж░ржпрзБржХрзНрждрж┐ ржкрзНрж░ржмржгрждрж╛"
      ]
    }
  }
};

export default function AIQuestions() {
  const [, setLocation] = useLocation();
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [subject, setSubject] = useState('');
  const [examType, setExamType] = useState('academic');
  const [classLevel, setClassLevel] = useState('');
  const [paper, setPaper] = useState('');
  const [chapter, setChapter] = useState('');
  const [questionType, setQuestionType] = useState('mcq');
  const [questionLanguage] = useState('bengali'); // Fixed to Bengali only
  const [questionCategory, setQuestionCategory] = useState('mixed'); // Math-based vs Theory-based
  const [difficulty, setDifficulty] = useState('medium');
  const [count, setCount] = useState(5);
  const [generatedQuestions, setGeneratedQuestions] = useState<any[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  // Get available papers based on subject and class
  const getAvailablePapers = () => {
    if (!subject || !classLevel) return [];
    return curriculumData[subject as keyof typeof curriculumData]?.[classLevel as keyof typeof curriculumData['chemistry']]?.papers || [];
  };

  // Get available chapters based on subject, class, and paper
  const getAvailableChapters = () => {
    if (!subject || !classLevel) return [];
    const subjectData = curriculumData[subject as keyof typeof curriculumData]?.[classLevel as keyof typeof curriculumData['chemistry']];
    if (!subjectData) return [];
    
    if (Array.isArray(subjectData.chapters)) {
      return subjectData.chapters;
    } else if (paper && subjectData.chapters && typeof subjectData.chapters === 'object') {
      return (subjectData.chapters as Record<string, string[]>)[paper] || [];
    }
    return [];
  };

  const handleGenerateQuestions = async () => {
    if (!subject || !classLevel || !chapter) {
      toast({
        title: "рждржерзНржп ржЕржирзБржкрж╕рзНржерж┐ржд",
        description: "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржм рждржерзНржп ржкрзВрж░ржг ржХрж░рзБржиред",
        variant: "destructive",
      });
      return;
    }
    
    setIsGenerating(true);
    try {
      const response = await apiRequest('POST', '/api/ai/generate-questions', {
        subject,
        examType,
        classLevel,
        paper,
        chapter,
        questionType,
        questionCategory,
        difficulty,
        count
      });

      const data = await response.json();
      setGeneratedQuestions(data.questions || []);
      
      toast({
        title: "тЬи ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ рж╕ржорзНржкржирзНржи!",
        description: `Praggo AI ржжрж┐ржпрж╝рзЗ ${data.questions?.length || 0}ржЯрж┐ ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред`,
      });
    } catch (error) {
      console.error('Error generating questions:', error);
      toast({
        title: "ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐рждрзЗ рждрзНрж░рзБржЯрж┐",
        description: "ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const copyQuestions = () => {
    const questionsText = generatedQuestions.map((q, index) => 
      `${index + 1}. ${q.questionText}\n   ржХ) ${q.options?.[0] || ''}\n   ржЦ) ${q.options?.[1] || ''}\n   ржЧ) ${q.options?.[2] || ''}\n   ржШ) ${q.options?.[3] || ''}\n   рж╕ржарж┐ржХ ржЙрждрзНрждрж░: ${q.correctAnswer || ''}\n`
    ).join('\n');
    
    navigator.clipboard.writeText(questionsText);
    toast({
      title: "тЬЕ ржХржкрж┐ рж╕ржорзНржкржирзНржи!",
      description: "ржкрзНрж░рж╢рзНржиржЧрзБрж▓рзЛ ржХрзНрж▓рж┐ржкржмрзЛрж░рзНржбрзЗ ржХржкрж┐ рж╣ржпрж╝рзЗржЫрзЗред",
    });
  };

  return (
    <div className={`min-h-screen ${isDarkMode 
      ? 'bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900' 
      : 'bg-gradient-to-br from-green-50 via-white to-blue-50'
    }`}>
      {/* Header with Back Navigation */}
      <header className={`backdrop-blur-sm border-b ${isDarkMode 
        ? 'bg-gray-800/95 border-green-400/30' 
        : 'bg-white/95 border-green-300/50 shadow-sm'
      }`}>
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLocation('/teacher')}
              className={`${isDarkMode ? 'text-cyan-400 hover:bg-slate-700' : 'text-green-600 hover:bg-green-50'}`}
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              ржлрж┐рж░рзЗ ржпрж╛ржи
            </Button>
            <div className="flex items-center space-x-2">
              <Bot className={`w-6 h-6 ${isDarkMode ? 'text-cyan-400' : 'text-green-600'}`} />
              <h1 className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                ЁЯОУ Praggo AI ржкрзНрж░рж╢рзНржи ржЬрзЗржирж╛рж░рзЗржЯрж░ - Next Level
              </h1>
              <span className="text-xs px-2 py-1 rounded-full bg-gradient-to-r from-blue-100 to-green-100 text-blue-800 font-semibold">
                ЁЯЗзЁЯЗй Bangladesh Academic Pro
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="p-4 space-y-6">
        <Card className={`${isDarkMode ? 'bg-slate-800/50 border-cyan-400/30' : 'bg-white border-green-300/50'}`}>
          <CardHeader>
            <CardTitle className={`flex items-center space-x-2 ${isDarkMode ? 'text-cyan-300' : 'text-green-600'}`}>
              <Sparkles className="w-5 h-5" />
              <span>ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯрзЗ AI ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Basic Settings */}
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржмрж┐рж╖ржпрж╝ *
                </Label>
                <Select value={subject} onValueChange={(value) => {
                  setSubject(value);
                  setClassLevel('');
                  setPaper('');
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржмрж┐рж╖ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="chemistry">ЁЯзк рж░рж╕рж╛ржпрж╝ржи (Chemistry)</SelectItem>
                    <SelectItem value="ict">ЁЯТ╗ рждржерзНржп ржУ ржпрзЛржЧрж╛ржпрзЛржЧ ржкрзНрж░ржпрзБржХрзНрждрж┐ (ICT)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржкрж░рзАржХрзНрж╖рж╛рж░ ржзрж░ржи
                </Label>
                <Select value={examType} onValueChange={setExamType}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржкрж░рзАржХрзНрж╖рж╛рж░ ржзрж░ржи" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="academic">ЁЯУЪ ржПржХрж╛ржбрзЗржорж┐ржХ</SelectItem>
                    <SelectItem value="admission">ЁЯОУ ржнрж░рзНрждрж┐ ржкрж░рзАржХрзНрж╖рж╛</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  рж╢рзНрж░рзЗржгрж┐ *
                </Label>
                <Select value={classLevel} onValueChange={(value) => {
                  setClassLevel(value);
                  setPaper('');
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="рж╢рзНрж░рзЗржгрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="9-10">ЁЯУЦ ржиржмржо-ржжрж╢ржо рж╢рзНрж░рзЗржгрж┐</SelectItem>
                    <SelectItem value="11-12">ЁЯУЪ ржПржХрж╛ржжрж╢-ржжрзНржмрж╛ржжрж╢ рж╢рзНрж░рзЗржгрж┐ (HSC)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Paper Selection (for HSC Chemistry) */}
            {subject && classLevel && getAvailablePapers().length > 1 && (
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржкрждрзНрж░ *
                </Label>
                <Select value={paper} onValueChange={(value) => {
                  setPaper(value);
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржкрждрзНрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                  </SelectTrigger>
                  <SelectContent>
                    {getAvailablePapers().map((paperName: string) => (
                      <SelectItem key={paperName} value={paperName}>
                        ЁЯУД {paperName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            {/* Chapter Selection */}
            {subject && classLevel && (
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржЕржзрзНржпрж╛ржпрж╝ *
                </Label>
                <Select value={chapter} onValueChange={setChapter}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржЕржзрзНржпрж╛ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи" />
                  </SelectTrigger>
                  <SelectContent className="max-h-60 overflow-y-auto">
                    {getAvailableChapters().map((chapterName: string) => (
                      <SelectItem key={chapterName} value={chapterName}>
                        ЁЯУЪ {chapterName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи
                </Label>
                <Select value={questionType} onValueChange={setQuestionType}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржкрзНрж░рж╢рзНржирзЗрж░ ржзрж░ржи" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="mcq">ЁЯУЭ MCQ (ржмрж╣рзБржирж┐рж░рзНржмрж╛ржЪржирзА)</SelectItem>
                    <SelectItem value="cq">тЬНя╕П CQ (рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржкрзНрж░рж╢рзНржи)</SelectItem>
                    <SelectItem value="creative">ЁЯОи рж╕рзГржЬржирж╢рзАрж▓ ржкрзНрж░рж╢рзНржи</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржкрзНрж░рж╢рзНржирзЗрж░ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ
                </Label>
                <Select value={questionCategory} onValueChange={setQuestionCategory}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржкрзНрж░рж╢рзНржирзЗрж░ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="mixed">ЁЯФД ржорж┐рж╢рзНрж░ (рж╕ржм ржзрж░ржи)</SelectItem>
                    <SelectItem value="math-based">ЁЯзо ржЧржгрж┐ржд ржнрж┐рждрзНрждрж┐ржХ</SelectItem>
                    <SelectItem value="theory-based">ЁЯУЦ рждрждрзНрждрзНржм ржнрж┐рждрзНрждрж┐ржХ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржХржарж┐ржирждрж╛рж░ рж╕рзНрждрж░
                </Label>
                <Select value={difficulty} onValueChange={setDifficulty}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="ржХржарж┐ржирждрж╛" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">ЁЯШК рж╕рж╣ржЬ</SelectItem>
                    <SelectItem value="medium">ЁЯУЪ ржоржзрзНржпржо</SelectItem>
                    <SelectItem value="hard">ЁЯОп ржЬржЯрж┐рж▓</SelectItem>
                    <SelectItem value="mixed">ЁЯФД ржорж┐рж╢рзНрж░ (рж╕ржм рж╕рзНрждрж░)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ржкрзНрж░рж╢рзНржи рж╕ржВржЦрзНржпрж╛
                </Label>
                <Input
                  type="number"
                  min="1"
                  max="20"
                  value={count}
                  onChange={(e) => setCount(Number(e.target.value))}
                  className={isDarkMode ? 'bg-slate-700 border-cyan-400/30 text-white' : 'bg-white'}
                />
              </div>
            </div>

            <Button
              onClick={handleGenerateQuestions}
              disabled={!subject || !classLevel || !chapter || isGenerating}
              className={`w-full ${isDarkMode ? 'bg-cyan-600 hover:bg-cyan-700' : 'bg-green-600 hover:bg-green-700'} text-white`}
            >
              {isGenerating ? (
                <>
                  <Sparkles className="w-4 h-4 mr-2 animate-spin" />
                  Praggo AI ржжрж┐ржпрж╝рзЗ {count}ржЯрж┐ ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...
                </>
              ) : (
                <>
                  <Bot className="w-4 h-4 mr-2" />
                  Praggo AI ржжрж┐ржпрж╝рзЗ {count}ржЯрж┐ ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рзБржи
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {generatedQuestions.length > 0 && (
          <Card className={`${isDarkMode ? 'bg-slate-800/50 border-cyan-400/30' : 'bg-white border-green-300/50'}`}>
            <CardHeader>
              <CardTitle className={`flex items-center space-x-2 ${isDarkMode ? 'text-cyan-300' : 'text-green-600'}`}>
                <FileText className="w-5 h-5" />
                <span>рждрзИрж░рж┐ржХрзГржд ржкрзНрж░рж╢рзНржи ({generatedQuestions.length}ржЯрж┐)</span>
                <span className="text-xs px-2 py-1 rounded-full bg-green-100 text-green-800">
                  Praggo AI
                </span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {generatedQuestions.map((question, index) => (
                  <div key={index} className={`p-4 border rounded-lg ${isDarkMode ? 'bg-slate-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <div className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                      {index + 1}. {question.questionText}
                    </div>
                    {question.options && (
                      <div className="grid grid-cols-1 gap-2 text-sm mb-2">
                        {question.options.map((option: string, optIndex: number) => (
                          <div key={optIndex} className={`p-2 rounded ${
                            option === question.correctAnswer 
                              ? (isDarkMode ? 'bg-green-900/50 text-green-300' : 'bg-green-100 text-green-800')
                              : (isDarkMode ? 'bg-slate-600/50 text-gray-300' : 'bg-white text-gray-700')
                          }`}>
                            {['ржХ', 'ржЦ', 'ржЧ', 'ржШ'][optIndex]}) {option}
                            {option === question.correctAnswer && ' тЬЕ'}
                          </div>
                        ))}
                      </div>
                    )}
                    {question.answer && (
                      <div className={`text-sm mt-3 p-3 rounded ${isDarkMode ? 'bg-blue-900/30 text-blue-200' : 'bg-blue-50 text-blue-800'}`}>
                        <strong>ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░:</strong> {question.answer}
                      </div>
                    )}
                    <div className={`text-xs mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      ржиржорзНржмрж░: {question.marks} | рж╕ржарж┐ржХ ржЙрждрзНрждрж░: {question.correctAnswer}
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6 flex flex-wrap gap-3">
                <Button 
                  onClick={copyQuestions}
                  variant="outline" 
                  className={isDarkMode ? 'border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10' : 'border-green-300 text-green-600 hover:bg-green-50'}
                >
                  ЁЯУЛ ржкрзНрж░рж╢рзНржи ржХржкрж┐ ржХрж░рзБржи
                </Button>
                <Button 
                  variant="outline" 
                  className={isDarkMode ? 'border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10' : 'border-green-300 text-green-600 hover:bg-green-50'}
                  onClick={() => setGeneratedQuestions([])}
                >
                  ЁЯЧСя╕П рж╕рж╛ржл ржХрж░рзБржи
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}