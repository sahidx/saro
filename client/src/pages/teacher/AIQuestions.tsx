import React, { useState } from 'react';
import { ArrowLeft, Bot, Sparkles, FileText, Settings } from 'lucide-react';
import { useLocation } from 'wouter';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

// Bangladesh NCTB Curriculum Structure
const curriculumData = {
  chemistry: {
    "9-10": {
      papers: [], // No paper division for Class 9-10
      chapters: [
        "‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶æ‡¶¨‡¶≤‡¶ø ‡¶ì ‡¶ó‡¶æ‡¶†‡¶®‡¶ø‡¶ï ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø",
        "‡¶ó‡¶æ‡¶†‡¶®‡¶ø‡¶ï ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®", 
        "‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞‡¶£‡¶ø ‡¶ì ‡¶Æ‡ßå‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶ß‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶§‡¶æ",
        "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®",
        "‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏",
        "‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
        "‡¶Ö‡¶Æ‡ßç‡¶≤, ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡¶ï ‡¶ì ‡¶≤‡¶¨‡¶£",
        "‡¶§‡¶°‡¶º‡¶ø‡ßé ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
        "‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
        "‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®"
      ]
    },
    "11-12": {
      papers: ["‡ßß‡¶Æ ‡¶™‡¶§‡ßç‡¶∞", "‡ß®‡¶Ø‡¶º ‡¶™‡¶§‡ßç‡¶∞"],
      chapters: {
        "‡ßß‡¶Æ ‡¶™‡¶§‡ßç‡¶∞": [
          "‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨‡¶∞‡ßá‡¶ü‡¶∞‡¶ø‡¶∞ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶ì ‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ",
          "‡¶ó‡¶æ‡¶†‡¶®‡¶ø‡¶ï ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
          "‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞‡¶£‡¶ø ‡¶ì ‡¶Æ‡ßå‡¶≤‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶ß‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶§‡¶æ", 
          "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶¨‡¶®‡ßç‡¶ß‡¶®",
          "‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏",
          "‡¶§‡¶∞‡¶≤",
          "‡¶ï‡¶†‡¶ø‡¶®",
          "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®",
          "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶ó‡¶§‡¶ø‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ",
          "‡¶∞‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡¶ï ‡¶≠‡¶æ‡¶∞‡¶∏‡¶æ‡¶Æ‡ßç‡¶Ø"
        ],
        "‡ß®‡¶Ø‡¶º ‡¶™‡¶§‡ßç‡¶∞": [
          "‡¶§‡¶æ‡¶™ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
          "‡¶§‡¶°‡¶º‡¶ø‡ßé ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®",
          "‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® (‡¶π‡¶æ‡¶á‡¶°‡ßç‡¶∞‡ßã‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡¶®)",
          "‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßã‡¶π‡¶≤, ‡¶´‡¶ø‡¶®‡¶≤, ‡¶á‡¶•‡¶æ‡¶∞)",
          "‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶°‡¶ø‡¶π‡¶æ‡¶á‡¶°, ‡¶ï‡¶ø‡¶ü‡ßã‡¶®, ‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡¶ï‡ßç‡¶∏‡¶ø‡¶≤‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶°)",
          "‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶ø‡¶®, ‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã ‡¶Ø‡ßå‡¶ó)",
          "‡¶ú‡ßà‡¶¨ ‡¶Ø‡ßå‡¶ó‡ßá‡¶∞ ‡¶ó‡¶†‡¶® ‡¶ì ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ", 
          "‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®"
        ]
      }
    }
  },
  ict: {
    "9-10": {
      papers: [], // No paper division for Class 9-10
      chapters: [
        "‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø: ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨ ‡¶ì ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶ø‡¶§",
        "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ",
        "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞",
        "‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶ì ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç",
        "‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ",
        "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶ì ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü",
        "‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®",
        "‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï, ‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶ì ‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞"
      ]
    },
    "11-12": {
      papers: [], // No paper division for HSC ICT
      chapters: [
        "‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø: ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨ ‡¶ì ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶ø‡¶§",
        "‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶ì ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏",
        "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ", 
        "‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶≠‡¶æ‡¶∑‡¶æ",
        "‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ",
        "‡¶°‡¶æ‡¶ü‡¶æ ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ì ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï",
        "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶ì ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®",
        "‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ì ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï‡ßç‡¶∏",
        "‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï, ‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶ì ‡¶®‡ßà‡¶§‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞"
      ]
    }
  }
};

export default function AIQuestions() {
  const [, setLocation] = useLocation();
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [subject, setSubject] = useState('');
  const [examType, setExamType] = useState('academic');
  const [classLevel, setClassLevel] = useState('');
  const [paper, setPaper] = useState('');
  const [chapter, setChapter] = useState('');
  const [questionType, setQuestionType] = useState('mcq');
  const [questionLanguage] = useState('bengali'); // Fixed to Bengali only
  const [difficulty, setDifficulty] = useState('medium');
  const [count, setCount] = useState(5);
  const [generatedQuestions, setGeneratedQuestions] = useState<any[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  // Get available papers based on subject and class
  const getAvailablePapers = () => {
    if (!subject || !classLevel) return [];
    return curriculumData[subject as keyof typeof curriculumData]?.[classLevel as keyof typeof curriculumData['chemistry']]?.papers || [];
  };

  // Get available chapters based on subject, class, and paper
  const getAvailableChapters = () => {
    if (!subject || !classLevel) return [];
    const subjectData = curriculumData[subject as keyof typeof curriculumData]?.[classLevel as keyof typeof curriculumData['chemistry']];
    if (!subjectData) return [];
    
    if (Array.isArray(subjectData.chapters)) {
      return subjectData.chapters;
    } else if (paper && subjectData.chapters && typeof subjectData.chapters === 'object') {
      return (subjectData.chapters as Record<string, string[]>)[paper] || [];
    }
    return [];
  };

  const handleGenerateQuestions = async () => {
    if (!subject || !classLevel || !chapter) {
      toast({
        title: "‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive",
      });
      return;
    }
    
    setIsGenerating(true);
    try {
      const response = await apiRequest('POST', '/api/ai/generate-questions', {
        subject,
        examType,
        classLevel,
        paper,
        chapter,
        questionType,
        difficulty,
        count
      });

      const data = await response.json();
      setGeneratedQuestions(data.questions || []);
      
      toast({
        title: "‚ú® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!",
        description: `Praggo AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ${data.questions?.length || 0}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
      });
    } catch (error) {
      console.error('Error generating questions:', error);
      toast({
        title: "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
        description: "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const copyQuestions = () => {
    const questionsText = generatedQuestions.map((q, index) => 
      `${index + 1}. ${q.questionText}\n   ‡¶ï) ${q.options?.[0] || ''}\n   ‡¶ñ) ${q.options?.[1] || ''}\n   ‡¶ó) ${q.options?.[2] || ''}\n   ‡¶ò) ${q.options?.[3] || ''}\n   ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${q.correctAnswer || ''}\n`
    ).join('\n');
    
    navigator.clipboard.writeText(questionsText);
    toast({
      title: "‚úÖ ‡¶ï‡¶™‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!",
      description: "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
    });
  };

  return (
    <div className={`min-h-screen ${isDarkMode 
      ? 'bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900' 
      : 'bg-gradient-to-br from-green-50 via-white to-blue-50'
    }`}>
      {/* Header with Back Navigation */}
      <header className={`backdrop-blur-sm border-b ${isDarkMode 
        ? 'bg-gray-800/95 border-green-400/30' 
        : 'bg-white/95 border-green-300/50 shadow-sm'
      }`}>
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setLocation('/teacher')}
              className={`${isDarkMode ? 'text-cyan-400 hover:bg-slate-700' : 'text-green-600 hover:bg-green-50'}`}
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
            </Button>
            <div className="flex items-center space-x-2">
              <Bot className={`w-6 h-6 ${isDarkMode ? 'text-cyan-400' : 'text-green-600'}`} />
              <h1 className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                Praggo AI ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞
              </h1>
              <span className="text-xs px-2 py-1 rounded-full bg-green-100 text-green-800">
                ü§ñ Praggo AI
              </span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="p-4 space-y-6">
        <Card className={`${isDarkMode ? 'bg-slate-800/50 border-cyan-400/30' : 'bg-white border-green-300/50'}`}>
          <CardHeader>
            <CardTitle className={`flex items-center space-x-2 ${isDarkMode ? 'text-cyan-300' : 'text-green-600'}`}>
              <Sparkles className="w-5 h-5" />
              <span>‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶™‡ßç‡¶∞‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶™‡¶ü‡ßá AI ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Basic Settings */}
            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º *
                </Label>
                <Select value={subject} onValueChange={(value) => {
                  setSubject(value);
                  setClassLevel('');
                  setPaper('');
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="chemistry">üß™ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® (Chemistry)</SelectItem>
                    <SelectItem value="ict">üíª ‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø (ICT)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶®
                </Label>
                <Select value={examType} onValueChange={setExamType}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶®" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="academic">üìö ‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï</SelectItem>
                    <SelectItem value="admission">üéì ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø *
                </Label>
                <Select value={classLevel} onValueChange={(value) => {
                  setClassLevel(value);
                  setPaper('');
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="9-10">üìñ ‡¶®‡¶¨‡¶Æ-‡¶¶‡¶∂‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø</SelectItem>
                    <SelectItem value="11-12">üìö ‡¶è‡¶ï‡¶æ‡¶¶‡¶∂-‡¶¶‡ßç‡¶¨‡¶æ‡¶¶‡¶∂ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø (HSC)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Paper Selection (for HSC Chemistry) */}
            {subject && classLevel && getAvailablePapers().length > 1 && (
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶™‡¶§‡ßç‡¶∞ *
                </Label>
                <Select value={paper} onValueChange={(value) => {
                  setPaper(value);
                  setChapter('');
                }}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶™‡¶§‡ßç‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent>
                    {getAvailablePapers().map((paperName: string) => (
                      <SelectItem key={paperName} value={paperName}>
                        üìÑ {paperName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            {/* Chapter Selection */}
            {subject && classLevel && (
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º *
                </Label>
                <Select value={chapter} onValueChange={setChapter}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent className="max-h-60 overflow-y-auto">
                    {getAvailableChapters().map((chapterName: string) => (
                      <SelectItem key={chapterName} value={chapterName}>
                        üìö {chapterName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}

            <div className="grid md:grid-cols-3 gap-4">
              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®
                </Label>
                <Select value={questionType} onValueChange={setQuestionType}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="mcq">üìù MCQ (‡¶¨‡¶π‡ßÅ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ)</SelectItem>
                    <SelectItem value="cq">‚úçÔ∏è CQ (‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®)</SelectItem>
                    <SelectItem value="creative">üé® ‡¶∏‡ßÉ‡¶ú‡¶®‡¶∂‡ßÄ‡¶≤ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶ï‡¶†‡¶ø‡¶®‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶§‡¶∞
                </Label>
                <Select value={difficulty} onValueChange={setDifficulty}>
                  <SelectTrigger className={isDarkMode ? 'bg-slate-700 border-cyan-400/30' : 'bg-white'}>
                    <SelectValue placeholder="‡¶ï‡¶†‡¶ø‡¶®‡¶§‡¶æ" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">üòä ‡¶∏‡¶π‡¶ú</SelectItem>
                    <SelectItem value="medium">üìö ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ</SelectItem>
                    <SelectItem value="hard">üéØ ‡¶ú‡¶ü‡¶ø‡¶≤</SelectItem>
                    <SelectItem value="mixed">üîÑ ‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞ (‡¶∏‡¶¨ ‡¶∏‡ßç‡¶§‡¶∞)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className={`${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
                </Label>
                <Input
                  type="number"
                  min="1"
                  max="20"
                  value={count}
                  onChange={(e) => setCount(Number(e.target.value))}
                  className={isDarkMode ? 'bg-slate-700 border-cyan-400/30 text-white' : 'bg-white'}
                />
              </div>
            </div>

            <Button
              onClick={handleGenerateQuestions}
              disabled={!subject || !classLevel || !chapter || isGenerating}
              className={`w-full ${isDarkMode ? 'bg-cyan-600 hover:bg-cyan-700' : 'bg-green-600 hover:bg-green-700'} text-white`}
            >
              {isGenerating ? (
                <>
                  <Sparkles className="w-4 h-4 mr-2 animate-spin" />
                  Praggo AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá {count}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                </>
              ) : (
                <>
                  <Bot className="w-4 h-4 mr-2" />
                  Praggo AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá {count}‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {generatedQuestions.length > 0 && (
          <Card className={`${isDarkMode ? 'bg-slate-800/50 border-cyan-400/30' : 'bg-white border-green-300/50'}`}>
            <CardHeader>
              <CardTitle className={`flex items-center space-x-2 ${isDarkMode ? 'text-cyan-300' : 'text-green-600'}`}>
                <FileText className="w-5 h-5" />
                <span>‡¶§‡ßà‡¶∞‡¶ø‡¶ï‡ßÉ‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ({generatedQuestions.length}‡¶ü‡¶ø)</span>
                <span className="text-xs px-2 py-1 rounded-full bg-green-100 text-green-800">
                  Praggo AI
                </span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {generatedQuestions.map((question, index) => (
                  <div key={index} className={`p-4 border rounded-lg ${isDarkMode ? 'bg-slate-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'}`}>
                    <div className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                      {index + 1}. {question.questionText}
                    </div>
                    {question.options && (
                      <div className="grid grid-cols-1 gap-2 text-sm mb-2">
                        {question.options.map((option: string, optIndex: number) => (
                          <div key={optIndex} className={`p-2 rounded ${
                            option === question.correctAnswer 
                              ? (isDarkMode ? 'bg-green-900/50 text-green-300' : 'bg-green-100 text-green-800')
                              : (isDarkMode ? 'bg-slate-600/50 text-gray-300' : 'bg-white text-gray-700')
                          }`}>
                            {['‡¶ï', '‡¶ñ', '‡¶ó', '‡¶ò'][optIndex]}) {option}
                            {option === question.correctAnswer && ' ‚úÖ'}
                          </div>
                        ))}
                      </div>
                    )}
                    {question.answer && (
                      <div className={`text-sm mt-3 p-3 rounded ${isDarkMode ? 'bg-blue-900/30 text-blue-200' : 'bg-blue-50 text-blue-800'}`}>
                        <strong>‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶â‡¶§‡ßç‡¶§‡¶∞:</strong> {question.answer}
                      </div>
                    )}
                    <div className={`text-xs mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {question.marks} | ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: {question.correctAnswer}
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="mt-6 flex flex-wrap gap-3">
                <Button 
                  onClick={copyQuestions}
                  variant="outline" 
                  className={isDarkMode ? 'border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10' : 'border-green-300 text-green-600 hover:bg-green-50'}
                >
                  üìã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
                <Button 
                  variant="outline" 
                  className={isDarkMode ? 'border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10' : 'border-green-300 text-green-600 hover:bg-green-50'}
                  onClick={() => setGeneratedQuestions([])}
                >
                  üóëÔ∏è ‡¶∏‡¶æ‡¶´ ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}